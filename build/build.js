// Generated by CommonJS Everywhere 0.7.0
(function (global) {
  function require(file, parentModule) {
    if ({}.hasOwnProperty.call(require.cache, file))
      return require.cache[file];
    var resolved = require.resolve(file);
    if (!resolved)
      throw new Error('Failed to resolve module ' + file);
    var module$ = {
        id: file,
        require: require,
        filename: file,
        exports: {},
        loaded: false,
        parent: parentModule,
        children: []
      };
    if (parentModule)
      parentModule.children.push(module$);
    var dirname = file.slice(0, file.lastIndexOf('/') + 1);
    require.cache[file] = module$.exports;
    resolved.call(module$.exports, module$, module$.exports, dirname, file);
    module$.loaded = true;
    return require.cache[file] = module$.exports;
  }
  require.modules = {};
  require.cache = {};
  require.resolve = function (file) {
    return {}.hasOwnProperty.call(require.modules, file) ? require.modules[file] : void 0;
  };
  require.define = function (file, fn) {
    require.modules[file] = fn;
  };
  var process = function () {
      var cwd = '/';
      return {
        title: 'browser',
        version: 'v0.10.5',
        browser: true,
        env: {},
        argv: [],
        nextTick: global.setImmediate || function (fn) {
          setTimeout(fn, 0);
        },
        cwd: function () {
          return cwd;
        },
        chdir: function (dir) {
          cwd = dir;
        }
      };
    }();
  require.define('/coffee/main.coffee', function (module, exports, __dirname, __filename) {
    var drag;
    require('/coffee/extend.coffee', module);
    drag = require('/coffee/drag.coffee', module).poke;
    drag.emit('init');
  });
  require.define('/coffee/drag.coffee', function (module, exports, __dirname, __filename) {
    var area, chan, dom, events, Point, random, vertexes;
    events = require('events', module);
    exports.chan = chan = new events.EventEmitter;
    random = function (n) {
      if (null == n)
        n = 600;
      return Math.random() * n;
    };
    dom = require('/coffee/dom.coffee', module);
    area = dom.find('#cover');
    Point = function (super$) {
      extends$(Point, super$);
      function Point(param$) {
        this.id = param$;
        this.elem = dom['new']();
        this.elem.onmousedown = this.mouse_down;
        this.elem.onmouseup = this.mouse_up;
        this.elem.onmousemove = this.mouse_move;
        this.dragging = false;
        this.attrs = {};
      }
      Point.prototype.mouse_down = function () {
        this.dragging = true;
        return console.log('mouse down');
      };
      Point.prototype.mouse_up = function () {
        this.dragging = true;
        return console.log('mouse up');
      };
      Point.prototype.set = function (key, value) {
        return this[key] = value;
      };
      Point.prototype.get = function (key) {
        return this[key];
      };
      Point.prototype.mouse_move = function (event) {
        return vertexes;
      };
      return Point;
    }(events.EventEmitter);
    vertexes = {
      data: [],
      more: function () {
        var id, point;
        id = this.data.length;
        point = new Point(id);
        this.data.push(point);
        return this.notify();
      },
      less: function () {
        this.data.pop();
        return this.notify();
      },
      notify: function () {
        var data;
        data = [];
        this.data.forEach(function (point) {
          return data.push({
            x: point.get('x'),
            y: point.get('y')
          });
        });
        return this.emit('update', data);
      }
    };
    function isOwn$(o, p) {
      return {}.hasOwnProperty.call(o, p);
    }
    function extends$(child, parent) {
      for (var key in parent)
        if (isOwn$(parent, key))
          child[key] = parent[key];
      function ctor() {
        this.constructor = child;
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child;
    }
  });
  require.define('/coffee/dom.coffee', function (module, exports, __dirname, __filename) {
    exports.find = function (query) {
      return document.querySelector(query);
    };
    exports.drop = function (name) {
      var div;
      div = document.createElement('div');
      div.setAttribute('class', 'drag');
      div.innerText = name;
      return div;
    };
    exports['new'] = function (tag) {
      if (null == tag)
        tag = 'div';
      return document.createElement(tag);
    };
  });
  require.define('events', function (module, exports, __dirname, __filename) {
    if (!process.EventEmitter)
      process.EventEmitter = function () {
      };
    var EventEmitter = exports.EventEmitter = process.EventEmitter;
    var isArray = typeof Array.isArray === 'function' ? Array.isArray : function (xs) {
        return Object.prototype.toString.call(xs) === '[object Array]';
      };
    ;
    var defaultMaxListeners = 10;
    EventEmitter.prototype.setMaxListeners = function (n) {
      if (!this._events)
        this._events = {};
      this._events.maxListeners = n;
    };
    EventEmitter.prototype.emit = function (type) {
      if (type === 'error') {
        if (!this._events || !this._events.error || isArray(this._events.error) && !this._events.error.length) {
          if (arguments[1] instanceof Error) {
            throw arguments[1];
          } else {
            throw new Error("Uncaught, unspecified 'error' event.");
          }
          return false;
        }
      }
      if (!this._events)
        return false;
      var handler = this._events[type];
      if (!handler)
        return false;
      if (typeof handler == 'function') {
        switch (arguments.length) {
        case 1:
          handler.call(this);
          break;
        case 2:
          handler.call(this, arguments[1]);
          break;
        case 3:
          handler.call(this, arguments[1], arguments[2]);
          break;
        default:
          var args = Array.prototype.slice.call(arguments, 1);
          handler.apply(this, args);
        }
        return true;
      } else if (isArray(handler)) {
        var args = Array.prototype.slice.call(arguments, 1);
        var listeners = handler.slice();
        for (var i = 0, l = listeners.length; i < l; i++) {
          listeners[i].apply(this, args);
        }
        return true;
      } else {
        return false;
      }
    };
    EventEmitter.prototype.addListener = function (type, listener) {
      if ('function' !== typeof listener) {
        throw new Error('addListener only takes instances of Function');
      }
      if (!this._events)
        this._events = {};
      this.emit('newListener', type, listener);
      if (!this._events[type]) {
        this._events[type] = listener;
      } else if (isArray(this._events[type])) {
        if (!this._events[type].warned) {
          var m;
          if (this._events.maxListeners !== undefined) {
            m = this._events.maxListeners;
          } else {
            m = defaultMaxListeners;
          }
          if (m && m > 0 && this._events[type].length > m) {
            this._events[type].warned = true;
            console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);
            console.trace();
          }
        }
        this._events[type].push(listener);
      } else {
        this._events[type] = [
          this._events[type],
          listener
        ];
      }
      return this;
    };
    EventEmitter.prototype.on = EventEmitter.prototype.addListener;
    EventEmitter.prototype.once = function (type, listener) {
      var self = this;
      self.on(type, function g() {
        self.removeListener(type, g);
        listener.apply(this, arguments);
      });
      return this;
    };
    EventEmitter.prototype.removeListener = function (type, listener) {
      if ('function' !== typeof listener) {
        throw new Error('removeListener only takes instances of Function');
      }
      if (!this._events || !this._events[type])
        return this;
      var list = this._events[type];
      if (isArray(list)) {
        var i = list.indexOf(listener);
        if (i < 0)
          return this;
        list.splice(i, 1);
        if (list.length == 0)
          delete this._events[type];
      } else if (this._events[type] === listener) {
        delete this._events[type];
      }
      return this;
    };
    EventEmitter.prototype.removeAllListeners = function (type) {
      if (type && this._events && this._events[type])
        this._events[type] = null;
      return this;
    };
    EventEmitter.prototype.listeners = function (type) {
      if (!this._events)
        this._events = {};
      if (!this._events[type])
        this._events[type] = [];
      if (!isArray(this._events[type])) {
        this._events[type] = [this._events[type]];
      }
      return this._events[type];
    };
  });
  require.define('/coffee/extend.coffee', function (module, exports, __dirname, __filename) {
    Array.prototype.remove = function (item) {
      var all, one;
      all = [];
      for (var i$ = 0, length$ = this.length; i$ < length$; ++i$) {
        one = this[i$];
        if (!(one === item))
          all.push(one);
      }
      return all;
    };
    window.global = {};
  });
  require('/coffee/main.coffee');
}.call(this, this));
/*
//@ sourceMappingURL=build.map
*/
// Generated by CoffeeScript 1.6.3
var __slice = [].slice;

define(function() {
  var add, check, conjugate, distance, divide, each_grow, minus, multiply, square;
  check = function() {
    var points;
    points = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return points.forEach(function(point) {
      if (!(point.x < Infinity)) {
        throw new Error("x");
      }
      if (!(point.y < Infinity)) {
        throw new Error("y");
      }
    });
  };
  add = function(a, b) {
    return {
      x: a.x + b.x,
      y: a.y + b.y
    };
  };
  minus = function(a, b) {
    return {
      x: a.x - b.x,
      y: a.y - b.y
    };
  };
  multiply = function(a, b) {
    return {
      x: (a.x * b.x) - (a.y * b.y),
      y: (a.x * b.y) + (a.y * b.x)
    };
  };
  conjugate = function(a) {
    return {
      x: a.x,
      y: -a.y
    };
  };
  divide = function(a, b) {
    var denominator, numberator;
    numberator = multiply(a, conjugate(b));
    denominator = multiply(b, conjugate(b));
    if ((denominator.x === 0) && (denominator.y === 0)) {
      return {
        x: 0,
        y: 0
      };
    } else {
      return {
        x: numberator.x / denominator.x,
        y: numberator.y / denominator.x
      };
    }
  };
  square = function(a) {
    return Math.pow(a, 2);
  };
  distance = function(a, b) {
    return square(a.x - b.x) + square(a.y - b.y);
  };
  each_grow = function(origin, destination, path) {
    var course, end, factor, result, start, whole_course;
    start = path[0];
    end = path[path.length - 1];
    course = minus(end, start);
    whole_course = minus(destination, origin);
    factor = divide(whole_course, course);
    result = [];
    path.slice(1, -1).forEach(function(a) {
      var b, c;
      b = minus(a, start);
      c = multiply(b, factor);
      return result.push(add(origin, c));
    });
    result.push(destination);
    return result;
  };
  return function(list, template) {
    var base_point, result;
    base_point = list[0];
    result = [base_point];
    list.slice(1).forEach(function(guide_point) {
      var segment, _ref;
      if ((1 < (_ref = distance(guide_point, base_point)) && _ref < 800000)) {
        segment = each_grow(base_point, guide_point, template);
        result.push.apply(result, segment);
        return base_point = guide_point;
      }
    });
    return result;
  };
});

/*
//@ sourceMappingURL=bend.map
*/
